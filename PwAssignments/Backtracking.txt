 Q1. Divide Array into k Equal Sum Subsets
import java.util.Arrays;

public class EqualSumSubsets {
    public boolean canPartitionKSubsets(int[] arr, int k) {
        int totalSum = Arrays.stream(arr).sum();
        if (totalSum % k != 0) {
            return false;
        }
        int target = totalSum / k;
        boolean[] visited = new boolean[arr.length];
        return backtrack(arr, visited, 0, k, 0, target);
    }

    private boolean backtrack(int[] arr, boolean[] visited, int start, int k, int currSum, int target) {
        if (k == 1) {
            return true;
        }
        if (currSum == target) {
            return backtrack(arr, visited, 0, k - 1, 0, target);
        }

        for (int i = start; i < arr.length; i++) {
            if (!visited[i] && currSum + arr[i] <= target) {
                visited[i] = true;
                if (backtrack(arr, visited, i + 1, k, currSum + arr[i], target)) {
                    return true;
                }
                visited[i] = false;
            }
        }
        return false;
    }

    public static void main(String[] args) {
        EqualSumSubsets obj = new EqualSumSubsets();
        int[] arr = {1, 3, 2, 2};
        int k = 2;
        System.out.println(obj.canPartitionKSubsets(arr, k));  // Output: true
    }
}
```

 Q2. Print All Permutations of an Array
import java.util.ArrayList;
import java.util.List;

public class ArrayPermutations {
    public List<List<Integer>> permute(int[] arr) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(arr, new ArrayList<>(), result);
        return result;
    }

    private void backtrack(int[] arr, List<Integer> tempList, List<List<Integer>> result) {
        if (tempList.size() == arr.length) {
            result.add(new ArrayList<>(tempList));
        } else {
            for (int i = 0; i < arr.length; i++) {
                if (tempList.contains(arr[i])) continue;
                tempList.add(arr[i]);
                backtrack(arr, tempList, result);
                tempList.remove(tempList.size() - 1);
            }
        }
    }

    public static void main(String[] args) {
        ArrayPermutations obj = new ArrayPermutations();
        int[] arr = {1, 2, 3};
        System.out.println(obj.permute(arr));  // Output: All possible permutations
    }
}
```

 Q3. Unique Permutations with Duplicates

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class UniquePermutations {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums);  // Sort to handle duplicates
        boolean[] used = new boolean[nums.length];
        backtrack(nums, used, new ArrayList<>(), result);
        return result;
    }

    private void backtrack(int[] nums, boolean[] used, List<Integer> tempList, List<List<Integer>> result) {
        if (tempList.size() == nums.length) {
            result.add(new ArrayList<>(tempList));
        } else {
            for (int i = 0; i < nums.length; i++) {
                if (used[i] || (i > 0 && nums[i] == nums[i - 1] && !used[i - 1])) continue;
                used[i] = true;
                tempList.add(nums[i]);
                backtrack(nums, used, tempList, result);
                used[i] = false;
                tempList.remove(tempList.size() - 1);
            }
        }
    }

    public static void main(String[] args) {
        UniquePermutations obj = new UniquePermutations();
        int[] nums1 = {1, 1, 2};
        System.out.println(obj.permuteUnique(nums1));  // Output: [[1, 1, 2], [1, 2, 1], [2, 1, 1]]
    }
}
```

 Q4. Subset Product Equals Target

*public class SubsetProduct {
    public boolean isProductEqualToTarget(int[] arr, int target) {
        return subsetProduct(arr, target, 1, 0);
    }

    private boolean subsetProduct(int[] arr, int target, int product, int index) {
        if (index == arr.length) {
            return product == target;
        }
        return subsetProduct(arr, target, product * arr[index], index + 1) ||
               subsetProduct(arr, target, product, index + 1);
    }

    public static void main(String[] args) {
        SubsetProduct obj = new SubsetProduct();
        int[] arr = {2, 3, 2, 5, 4};
        int target = 16;
        System.out.println(obj.isProductEqualToTarget(arr, target));  // Output: true (2*2*4 = 16)
    }
}
```

 Q5. N-Queens Problem
public class NQueens {
    public int totalNQueens(int n) {
        int[] count = {0};
        boolean[] cols = new boolean[n];  // Columns to track
        boolean[] d1 = new boolean[2 * n]; // Diagonal1
        boolean[] d2 = new boolean[2 * n]; // Diagonal2
        backtrack(n, 0, cols, d1, d2, count);
        return count[0];
    }

    private void backtrack(int n, int row, boolean[] cols, boolean[] d1, boolean[] d2, int[] count) {
        if (row == n) {
            count[0]++;
        }
        for (int col = 0; col < n; col++) {
            int id1 = col - row + n;
            int id2 = col + row;
            if (cols[col] || d1[id1] || d2[id2]) continue;
            cols[col] = d1[id1] = d2[id2] = true;
            backtrack(n, row + 1, cols, d1, d2, count);
            cols[col] = d1[id1] = d2[id2] = false;
        }
    }

    public static void main(String[] args) {
        NQueens obj = new NQueens();
        int n = 4;
        System.out.println(obj.totalNQueens(n));  // Output: 2 distinct solutions for 4-queens
    }
}
```

