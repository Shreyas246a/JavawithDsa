1. Mutable String in Java:
In Java, the String class is immutable, meaning once a String object is created, its value cannot be changed. To work with mutable strings, Java provides classes like StringBuilder and StringBuffer. These classes allow modifications to the string, such as appending, inserting, or deleting characters, without creating a new object each time.

2. WAP to reverse a String "PWSKILLS" to "SLLIKSPW":
You can reverse a string using StringBuilder in Java.
public class ReverseString {
    public static void main(String[] args) {
        String str = "PWSKILLS";
        StringBuilder reversed = new StringBuilder(str).reverse();
        System.out.println("Reversed String: " + reversed.toString());
    }
}

3. WAP to reverse a sentence while preserving the position:
To reverse each word in a sentence while preserving the word positions:public class ReverseSentence {
    public static void main(String[] args) {
        String sentence = "Think Twice";
        String[] words = sentence.split(" ");
        StringBuilder result = new StringBuilder();
        
        for (String word : words) {
            result.append(new StringBuilder(word).reverse().toString()).append(" ");
        }
        
        // Trim to remove the trailing space
        System.out.println("Reversed Sentence: " + result.toString().trim());
    }
}
4. WAP to sort a String alphabetically:
Sorting characters in a string alphabetically can be done by converting the string to a character array, sorting it, and then creating a new string from the sorted characters.
import java.util.Arrays;

public class SortString {
    public static void main(String[] args) {
        String str = "PWSKILLS";
        
        // Convert string to char array
        char[] chars = str.toCharArray();
        
        // Sort the char array
        Arrays.sort(chars);
        
        // Convert back to string
        String sortedString = new String(chars);
        
        System.out.println("Sorted String: " + sortedString);
    }
}
