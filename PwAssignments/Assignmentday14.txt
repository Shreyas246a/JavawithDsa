1. What is a String in Java?
A String in Java is a sequence of characters. In Java, strings are objects of the String class which is part of the java.lang package. A string is essentially a series of characters stored as an immutable object, meaning once it's created, its value cannot be changed.

2. Types of String in Java
Java supports two types of strings:
Literal Strings: Created by using double quotes, e.g., "Hello". These are stored in the String Constant Pool.

String Objects: Created using the new keyword, e.g., new String("Hello"). This explicitly allocates memory for the object in the heap, even if the string value already exists in the pool.

3. How Many Ways Can You Create String Objects in Java?
There are two main ways to create a string object in Java:

String str = "Hello";

String str = new String("Hello");


4. What is a String Constant Pool?
The String Constant Pool is a special memory region where Java stores string literals to avoid duplication. If a string literal already exists in the pool, the reference to that literal is returned rather than creating a new object. This helps in saving memory and improving performance.

5. What do you mean by Mutable and Immutable Objects?
Immutable Objects: These objects cannot be changed once they are created. For example, a String in Java is immutable. When you try to modify a string, a new object is created, and the original string remains unchanged.
Mutable Objects: These objects can be changed after creation. Examples in Java include StringBuilder and StringBuffer.

6. Where Exactly is the String Constant Pool Located in Memory?
The String Constant Pool is part of the Heap Memory, specifically within the method area in the heap. Starting from Java 7, the String Constant Pool has been moved from the Permanent Generation (PermGen) to the Heap to improve memory management and garbage collection.
