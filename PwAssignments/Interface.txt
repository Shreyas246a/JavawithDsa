1. What is an interface in Java?
Ans: An interface in Java is a mechanism that is used to achieve complete abstraction. It is basically a kind of
class that contains only constants and abstract methods.
2. Which modifiers are allowed for methods in an Interface?Explain with an example
Ans: Only abstract and public modifiers are allowed for methods in interfaces.
3. What is the use of interface in Java?
Ans: There are many reasons to use interfaces in java. They are as follows:
a. An interface is used to achieve full abstraction.
b. Using interfaces is the best way to expose our projectâ€™s API to some other project.
c. Programmers use interfaces to customise features of software differently for different objects.
d. By using interface, we can achieve the functionality of multiple inheritance.
4.
1. Nature of Implementation
Abstract Class: It can have both abstract methods (methods without a body) and concrete methods (methods with implementation). This allows an abstract class to provide some default behavior.

Interface: By default, all methods in an interface are abstract (without implementation) unless they are defined as default or static (since Java 8). Interfaces cannot have instance methods with a body (before Java 8).

2. Multiple Inheritance
Abstract Class: A class can only extend one abstract class due to Java's single inheritance limitation.
Interface: A class can implement multiple interfaces, enabling multiple inheritance.

3. Fields (Variables)
Abstract Class: It can have both instance variables and constants.
Interface: All fields in an interface are implicitly public, static, and final (i.e., constants). You cannot declare instance variables in an interface.
4. Constructor
Abstract Class: Can have constructors, which are called when an instance of a subclass is created. This allows it to initialize some state.
Interface: Interfaces cannot have constructors since they cannot maintain any state or create objects.